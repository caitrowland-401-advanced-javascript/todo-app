{"version":3,"sources":["components/Header/Header.js","components/ToDoList/ToDoList.js","components/Footer/Footer.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Header","className","ToDoList","useState","toDoList","setToDoList","setStatus","newTask","assignedTo","difficulty","state","setState","handleChange","e","value","target","name","handleStatus","checked","status","onSubmit","preventDefault","reset","onChange","type","placeholder","min","max","map","task","class","key","onClick","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAaeA,MAVf,WACQ,OACI,oCACA,yBAAKC,UAAU,UACf,8C,kCC6EGC,MAhFf,WAAsB,IAAD,EAEeC,mBAAS,IAFxB,mBAEVC,EAFU,KAEAC,EAFA,OAIWF,oBAAS,GAJpB,mBAIFG,GAJE,aAMSH,mBAAS,CAC/BI,QAAS,GACTC,WAAY,GACZC,WAAY,IATC,mBAMVC,EANU,KAMHC,EANG,KAmBXC,EAAe,SAAAC,GACjB,IAAMC,EAAQD,EAAEE,OAAOD,MACvBH,EAAS,eACFD,EADC,eAEHG,EAAEE,OAAOC,KAAOF,MAInBG,EAAe,SAACJ,GACfA,EAAEE,OAAOG,QACRZ,EAAU,CAACa,QAAQ,IAEjBb,EAAU,CAACa,QAAQ,KAG7B,OACI,yBAAKlB,UAAU,YACX,4CACA,0BAAMmB,SAxBO,SAAAP,GACjBA,EAAEQ,iBACFhB,EAAY,GAAD,mBAAKD,GAAL,CAAeM,EAAMH,WAChCM,EAAEE,OAAOO,UAsBD,2BACIN,KAAK,UACLF,MAAOJ,EAAMH,QACbgB,SAAUX,EACVY,KAAK,OACLC,YAAY,aAEhB,2BACIT,KAAK,aACLF,MAAOJ,EAAMF,WACbe,SAAUX,EACVY,KAAK,OACLC,YAAY,gBAEhB,2BACIT,KAAK,aACLF,MAAOJ,EAAMD,WACbc,SAAUX,EACVY,KAAK,SACLE,IAAI,IACJC,IAAI,MAER,2BAAOH,KAAK,SAASV,MAAO,kBAGhC,4BACKV,EAASwB,KAAI,SAAAC,GAAI,OACd,oCACA,wBAAIC,MAAM,OAAOC,IAAOF,GACxB,2BAAOG,QAASf,EAChBO,KAAK,aACL,wCAAcK,EAAd,mBAAoCnB,EAAMF,WAA1C,kBAAqEE,EAAMD,oB,MC3DhFwB,MAVf,WACI,OACI,oCACA,yBAAKhC,UAAU,UACX,2DCWGiC,MAdf,WAEI,OACI,6BAEI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3a97db05.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.css'\n\nfunction Header() { \n        return (\n            <>\n            <div className=\"header\" > \n            <h1> To-Do List</h1>\n            </div>\n            </>\n        )\n}\n\nexport default Header","import React, {useState} from 'react'\n\nimport './ToDoList.css'\n\nfunction ToDoList () {\n\n    const [toDoList, setToDoList] = useState([])\n\n    const [status, setStatus] = useState(false)\n\n    const [state, setState] = useState({\n        newTask: \"\",\n        assignedTo: \"\",\n        difficulty: 0,\n    })\n\n\n    const handleSubmit = e => {\n        e.preventDefault() \n        setToDoList([...toDoList, state.newTask])\n        e.target.reset()\n    }\n\n    const handleChange = e => {\n        const value = e.target.value\n        setState({\n            ...state,\n            [e.target.name]: value\n         })\n    }\n\n    const handleStatus = (e) => {\n        if(e.target.checked) {\n            setStatus({status: true})\n        }\n        else {setStatus({status: false })}\n    }\n\n    return (\n        <div className=\"toDoList\">\n            <h2>Current List</h2>\n            <form onSubmit = {handleSubmit}>\n                <input \n                    name=\"newTask\"\n                    value={state.newTask}\n                    onChange={handleChange} \n                    type=\"text\" \n                    placeholder=\"New Task\" \n                    />\n                <input \n                    name=\"assignedTo\"\n                    value={state.assignedTo}\n                    onChange={handleChange}\n                    type=\"text\" \n                    placeholder=\"Assigned To\" \n                    />\n                <input \n                    name=\"difficulty\"\n                    value={state.difficulty}\n                    onChange={handleChange} \n                    type=\"number\" \n                    min=\"1\"\n                    max=\"5\"\n                    />\n                <input type=\"submit\" value =\"Add New Task\" />\n            </form>\n\n            <ul>\n                {toDoList.map(task => (\n                    <>\n                    <li class=\"task\" key = {task}> \n                    <input onClick={handleStatus}\n                    type=\"checkbox\"/>\n                    <span> Task: {task} | Assigned To: {state.assignedTo} | Difficulty: {state.difficulty}</span>\n                    </li>\n                    </>\n                ))}\n            </ul>\n\n        </div>\n    )\n\n}\n\nexport default ToDoList","import React from 'react'\n\nimport './Footer.css'\n\nfunction Footer() {\n    return(\n        <>\n        <div className=\"footer\">\n            <p>To-Do App by Cait Rowland</p>\n        </div>\n        </>\n    )\n}\n\nexport default Footer","import React from 'react'\nimport Header from '../Header/Header'\nimport ToDoList from '../ToDoList/ToDoList'\nimport Footer from '../Footer/Footer'\n\nfunction App () {\n\n    return (\n        <div>\n\n            <Header />\n            <ToDoList />\n            <Footer />\n\n        </div>\n    )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App /> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}